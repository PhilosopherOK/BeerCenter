package work.project.beercenter.bot;

import work.project.beercenter.mail.NotificationService;
import work.project.beercenter.model.Clients;
import work.project.beercenter.model.LoyaltyCard;

import java.text.SimpleDateFormat;

import java.util.Date;

public enum BotState {

    Start {
        @Override
        public void enter(BotContext context) {
            Clients clients = context.getClients();
            context.getBot().sendPhoto(clients, "logotypes/main1.jpeg");
            context.getBot().sendMessage(clients, "–í—ñ—Ç–∞—î–º–æ –≤–∞—Å —É Beer Center !");
        }

        @Override
        public BotState nextState() {
            return EnterFullName;
        }
    },

    EnterFullName {
        private BotState next;

        @Override
        public void enter(BotContext context) {
            context.getBot().sendMessage(context.getClients(), "–ë—É–¥—å –ª–∞—Å–∫–∞ –≤–≤–µ–¥—ñ—Ç—å –≤–∞—à–µ –ü–Ü–ë:");
        }

        @Override
        public void handleInput(BotContext context) {
            Clients clients = context.getClients();
            if (context.getInput().equals("")) {
                next = EnterFullName;
                context.getBot().sendMessage(clients, "–ë—É–¥—å –ª–∞—Å–∫–∞ –≤–≤–µ–¥—ñ—Ç—å –≤–∞—à–µ –ü–Ü–ë:");
            } else {
                next = EnterPhone;
                clients.setFullName(context.getInput());
            }
        }

        @Override
        public BotState nextState() {
            return next;
        }
    },
    EnterPhone {
        private BotState next;

        @Override
        public void enter(BotContext context) {
            context.getBot().sendMessage(context.getClients(),
                    "–ë—É–¥—å –ª–∞—Å–∫–∞ –≤–≤–µ–¥—ñ—Ç—å –∫–æ—Ä–µ–∫—Ç–Ω–∏–π –Ω–æ–º–µ—Ä —Ç–µ–ª–µ—Ñ–æ–Ω—É –ø–æ—á–∏–Ω–∞—é—á–∏ –∑ 380(–≤–∞–º –Ω–∞–¥—ñ–π–¥–µ —Å–º—Å –∑ –∫–æ–¥–æ–º –ø—ñ–¥—Ç–≤–µ—Ä–¥–∂–µ–Ω–Ω—è):");
        }

        @Override
        public void handleInput(BotContext context) {
            String number = context.getInput();
            Clients clients = context.getClients();
            if (!number.equals("") && number.length() == 11) {
                try {
                    Long correctNumber = Long.parseLong(number);
                    next = CheckForNumberValid;
                    context.getBot().sendMessage(clients, "–Ω–æ–º–µ—Ä —Ç–µ–ª–µ—Ñ–æ–Ω—É –∫–æ—Ä–µ–∫—Ç–Ω–∏–π");
                    context.getTools().getPhoneValidator().sendRandomCodeFromNumber(clients, correctNumber);
                    clients.setPhone(context.getInput());
                } catch (Exception e) {
                    next = EnterPhone;
                    context.getBot().sendMessage(context.getClients(), "–Ω–æ–º–µ—Ä —Ç–µ–ª–µ—Ñ–æ–Ω—É –Ω–µ–∫–æ—Ä–µ–∫—Ç–Ω–∏–π");
                }
            } else {
                next = EnterPhone;
                context.getBot().sendMessage(context.getClients(), "–Ω–æ–º–µ—Ä —Ç–µ–ª–µ—Ñ–æ–Ω—É –Ω–µ–∫–æ—Ä–µ–∫—Ç–Ω–∏–π");
            }
        }

        @Override
        public BotState nextState() {
            return next;
        }
    },

    CheckForNumberValid {
        private BotState next;

        @Override
        public void enter(BotContext context) {
            context.getBot().sendMessage(context.getClients(),
                    "–ë—É–¥—å –ª–∞—Å–∫–∞ –≤–≤–µ–¥—ñ—Ç—å –∫–æ–¥ –∑ —Å–º—Å:");
        }

        @Override
        public void handleInput(BotContext context) {
            if (context.getTools().getPhoneValidator().numberIsValid(context.getClients(), context.getInput())) {
                context.getBot().sendMessage(context.getClients(), "–Ω–æ–º–µ—Ä –ø—ñ–¥—Ç–≤–µ—Ä–¥–∂–µ–Ω–Ω–æ");
                next = EnterEmail;
            } else {
                context.getBot().sendMessage(context.getClients(), "–Ω–æ–º–µ—Ä –Ω–µ –ø—ñ–¥—Ç–≤–µ—Ä–¥–∂–µ–Ω–Ω–æ");
                next = EnterPhone;
                context.getClients().setPhone("–¥–∞–Ω–Ω—ñ –≤—ñ–¥—Å—É—Ç–Ω—ñ");

            }
        }

        @Override
        public BotState nextState() {
            return next;
        }
    },

    EnterEmail {
        private BotState next;

        @Override
        public void enter(BotContext context) {
            context.getBot().sendMessage(context.getClients(),
                    "–ë—É–¥—å –ª–∞—Å–∫–∞ –≤–≤–µ–¥—ñ—Ç—å –∫–æ—Ä–µ–∫—Ç–Ω—É –µ–ª–µ–∫—Ç—Ä–æ–Ω–Ω—É –ø–æ—à—Ç—É:");
        }

        @Override
        public void handleInput(BotContext context) {
            String email = context.getInput();

            if (Utils.isValidEmailAddress(email)) {
                context.getClients().setEmail(context.getInput());
                next = EnterDateOfBirthday;
            } else {
                context.getBot().sendMessage(context.getClients(),
                        "–ù–µ–∫–æ—Ä–µ–∫—Ç–Ω–æ –≤–≤–µ–¥–µ–Ω–∞ –ø–æ—à—Ç–∞!");
                next = EnterEmail;
            }
        }

        @Override
        public BotState nextState() {
            return next;
        }
    },
    EnterDateOfBirthday {
        private BotState next;

        @Override
        public void enter(BotContext context) {
            context.getBot().sendMessage(context.getClients(),
                    "–ë—É–¥—å –ª–∞—Å–∫–∞ –≤–≤–µ–¥—ñ—Ç—å –¥–∞—Ç—É –Ω–∞—Ä–æ–¥–∂–µ–Ω–Ω—è —É —Ñ–æ—Ä–º–∞—Ç—ñ (–≥–≥–≥–≥-–º–º-–¥–¥):");
        }

        @Override
        public void handleInput(BotContext context) {
            SimpleDateFormat sdf = new SimpleDateFormat("yyyy-MM-dd");
            try {
                Date date = sdf.parse(context.getInput());
                next = EnterAddress;
                context.getClients().setDateOfBirthday(date);
            } catch (Exception e) {
                context.getBot().sendMessage(context.getClients(),
                        "–ù–µ–∫–æ—Ä–µ–∫—Ç–Ω–∏–π —Ñ–æ—Ä–º–∞—Ç –¥–∞—Ç–∏!");
                next = EnterDateOfBirthday;
            }
        }

        @Override
        public BotState nextState() {
            return next;
        }
    },
    EnterAddress {
        @Override
        public void enter(BotContext context) {
            context.getBot().sendMessage(context.getClients(), "–ë—É–¥—å –ª–∞—Å–∫–∞ –≤–≤–µ–¥—ñ—Ç—å –≤–∞—à—É –∞–¥—Ä–µ—Å—É:");
        }

        @Override
        public void handleInput(BotContext context) {
            context.getClients().setAddress(context.getInput().equals("") ? "–¥–∞–Ω–Ω—ñ –≤—ñ–¥—Å—É—Ç–Ω—ñ" : context.getInput());
            Clients clients = context.getClients();
            if (clients.getLoyaltyCard() == null) {
                Long newCardNumber = context.getTools().getNewCardNumber();
                String getPathBarCode = context.getTools().createBarCodeAndGetPath(newCardNumber);
                LoyaltyCard loyaltyCard = new LoyaltyCard(0, newCardNumber,
                        getPathBarCode, context.getClients());
                context.getTools().getLoyaltyCardService().save(loyaltyCard);
            }
        }

        @Override
        public BotState nextState() {
            return MyProfile;
        }
    },
    ChooseAnAction {
        private BotState next;

        @Override
        public void enter(BotContext context) {
            context.getBot().sendMessage(context.getClients(),
                    "–ë—É–¥—å –ª–∞—Å–∫–∞ –æ–±–µ—Ä—ñ—Ç—å –Ω–µ–æ–±—Ö—ñ–¥–Ω—É –æ–ø–µ—Ä–∞—Ü—ñ—é –∑ –∫–ª–∞–≤—ñ–∞—Ç—É—Ä–∏ –æ–ø–µ—Ä–∞—Ü—ñ–π:");
        }

        @Override
        public void handleInput(BotContext context) {
            String command = context.getInput();
            switch (command) {
                case "/myProfile":
                    next = MyProfile;
                    break;
                case "/myCard":
                    next = MyCard;
                    break;
                case "/myBalance":
                    next = MyBalance;
                    break;
                case "/updateMyProfile":
                    next = UpdateMyProfile;
                    break;
                case "/myActions":
                    next = MyActions;
                    break;
                case "/complaintsAndWishes":
                    next = ComplaintsAndWishes;
                    break;
            }
        }

        @Override
        public BotState nextState() {
            return next;
        }
    },

    MyProfile {
        @Override
        public void enter(BotContext context) {
            Clients clients = context.getClients();
            context.getBot().sendMessage(context.getClients(),
                    "ü§©" + "\uD83E\uDD29 Your full name is: " + clients.getFullName() + "\n" +
                            "üì±" + "\uD83D\uDCF1 Your phone is: " + clients.getPhone() + "\n" +
                            "üìß" + "\uD83D\uDCE7 Your email is: " + clients.getEmail() + "\n" +
                            "üéÇ" + "\uD83C\uDF82 Your dateOfBirthday is: " + clients.getDateOfBirthday() + "\n" +
                            "üåÉ" + "\uD83C\uDF03 Your address is: " + clients.getAddress());
        }

        @Override
        public BotState nextState() {
            return ChooseAnAction;
        }
    },

    MyCard {
        @Override
        public void enter(BotContext context) {
            //send photo barcode
            Clients clients = context.getClients();
            String pathOfBarcode = clients.getLoyaltyCard().getPathOfBarcode();
            context.getBot().sendPhoto(clients, pathOfBarcode);
            context.getBot().sendMessage(clients,
                    "–≤–∏ –Ω–∞–π–¥–∏–≤–æ–≤—ñ–∂–Ω—ñ—à–∞ –ª—é–¥–∏–Ω–∞, –∞ –æ—Å—å –≤–∞—à –Ω–æ–º–µ—Ä –±–æ–Ω—É—Å–Ω–æ—ó –∫–∞—Ä—Ç–∏ :" + "\n" +
                            "üí≥" + "\uD83D\uDCB3 " + clients.getLoyaltyCard().getNumberOfCard());
        }

        @Override
        public BotState nextState() {
            return ChooseAnAction;
        }
    },

    MyBalance {
        @Override
        public void enter(BotContext context) {
            Clients clients = context.getClients();
            context.getBot().sendMessage(clients,
                    "\uD83E\uDD11 –≤–∞—à –±–æ–Ω—É—Å–Ω–∏–π —Ä–∞—Ö—É–Ω–æ–∫ —Å—Ç–∞–Ω–æ–≤–∏—Ç—å: " + clients.getLoyaltyCard().getBonusBalance());
        }

        @Override
        public BotState nextState() {
            return ChooseAnAction;
        }
    },

    UpdateMyProfile {
        @Override
        public void enter(BotContext context) {
            context.getBot().sendMessage(context.getClients(), "–Ø–∫—â–æ –±–∞–∂–∞–µ—Ç–µ –∑–º—ñ–Ω–∏—Ç–∏ –¥–∞–Ω—ñ —Ç–æ –±—É–¥—å –ª–∞—Å—Ç–∞ –¥–∞–π—Ç–µ –≤—ñ–¥–ø–æ–≤—ñ–¥—å –Ω–∞ –¥–µ–∫—ñ–ª—å–∫–∞ –ø–∏—Ç–∞–Ω—å:");
        }

        @Override
        public BotState nextState() {
            return EnterFullName;
        }
    },

    MyActions {
        @Override
        public void enter(BotContext context) {
            context.getBot().sendMessage(context.getClients(), "–í–∞—à—ñ –∞–∫—Ü—ñ—ó:" + "\n" +
                    context.getTools().getActionsService().getActions());
        }

        @Override
        public BotState nextState() {
            return ActionsIterator;
        }
    },
    ActionsIterator {
        private BotState next;

        @Override
        public void enter(BotContext context) {
            context.getBot().sendMessage(context.getClients(),
                    "–û–±–µ—Ä—ñ—Ç—å –Ω–∞—Å—Ç—É–ø–Ω–∏–π –∫—Ä–æ–∫ –∑ –∫–ª–∞–≤—ñ–∞—Ç—É—Ä–∏ –∫–æ–º–∞–Ω–¥:");
        }

        @Override
        public void handleInput(BotContext context) {
            String nextStep = context.getInput();
            switch (nextStep) {
                case "/next":
                    next = NextAction;
                    break;
                case "/previous":
                    next = PreviousAction;
                case "/back":
                    next = ChooseAnAction;
                    break;
                default:
                    next = ChooseAnAction;
                    break;
            }
        }

        @Override
        public BotState nextState() {
            return next;
        }
    },
    NextAction {
        @Override
        public void enter(BotContext context) {
            context.getBot().sendMessage(context.getClients(),
                    context.getTools().getActionsService().getNextActions().toString());
        }

        @Override
        public BotState nextState() {
            return ActionsIterator;
        }
    },
    PreviousAction {
        @Override
        public void enter(BotContext context) {
            context.getBot().sendMessage(context.getClients(),
                    context.getTools().getActionsService().getPreviousActions().toString());
        }

        @Override
        public BotState nextState() {
            return ActionsIterator;
        }
    },

    ComplaintsAndWishes {
        @Override
        public void enter(BotContext context) {
            context.getBot().sendMessage(context.getClients(),
                    "–ë—É–¥—å –ª–∞—Å–∫–∞ –≤–≤–µ–¥—ñ—Ç—å –≤–∞—à—É —Å–∫–∞—Ä–≥—É —á–∏ –ø–æ–±–∞–∂–∞–Ω–Ω—è: ");
        }

        @Override
        public void handleInput(BotContext context) {
            Clients clients = context.getClients();
            NotificationService notificationService = context.getTools().getNotificationService();

            //send message to admin with complaints or wishes
            notificationService.sendComplaintsAndWishesToAdminMail(clients, context.getInput());
        }

        @Override
        public BotState nextState() {
            return MyProfile;
        }
    },


    Approved(false) {
        @Override
        public void enter(BotContext context) {
            context.getBot().sendMessage(context.getClients(),
                    "Thank you for application!");
        }

        @Override
        public BotState nextState() {
            return Start;
        }
    };

    // --------------- //

    private static BotState[] states;
    private final boolean inputNeeded;

    BotState() {
        this.inputNeeded = true;
    }

    BotState(boolean inputNeeded) {
        this.inputNeeded = inputNeeded;
    }

    public static BotState getInitialState() {
        return byId(0);
    }

    public static BotState byId(int id) {
        if (states == null) {
            states = BotState.values();
        }

        return states[id];
    }

    public boolean isInputNeeded() {
        return inputNeeded;
    }

    public void handleInput(BotContext context) {
        // do nothing by default
    }

    public abstract void enter(BotContext context);

    public abstract BotState nextState();
}
